/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUIComponents;

import Managers.*;
import Objetos.Monto;
import Objetos.ObraSocial;
import Objetos.Prestacion;
import Objetos.Profesional;
import Utils.GUIUtils.PanelGUIHandler;
import Utils.GUIUtils.SMenuGUIHandler;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import Utils.TableGenerator.CoberturaTableGenerator;
import Utils.TableGenerator.ProfesionalTableGenerator;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Juan
 */
public class ActualizarPreciosProfesional extends Panel {
    
    private static ActualizarPreciosProfesional actualizarPreciosProfesional;

    List<Profesional> ProfesionalList;

    private TableColumn idsPrestacion;
    public static ActualizarPreciosProfesional getInstance(){
        if(actualizarPreciosProfesional==null){
            actualizarPreciosProfesional= new ActualizarPreciosProfesional();
        }
        return actualizarPreciosProfesional;
    }
    /**
     * Creates new form ActualizarListaPrecios
     */
    private ActualizarPreciosProfesional() {
        initComponents();


        
        //actualizacion de tabla
        leeCB();
        
        leerTablaProfesional();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        profesionalCB = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        profesionalJT = new javax.swing.JTable();
        volverButton = new javax.swing.JLabel();

        setBackground(new java.awt.Color(223, 246, 255));
        setPreferredSize(new java.awt.Dimension(970, 637));

        profesionalCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una opcion" }));
        profesionalCB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                profesionalCBMousePressed(evt);
            }
        });

        profesionalJT.setBackground(new java.awt.Color(223, 246, 255));
        profesionalJT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        profesionalJT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                profesionalJTKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(profesionalJT);

        volverButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        volverButton.setText("Volver");
        volverButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        volverButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                volverButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                volverButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                volverButtonMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addComponent(profesionalCB, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(431, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(volverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(profesionalCB, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void profesionalCBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profesionalCBMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_profesionalCBMousePressed

    private void volverButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverButtonMouseEntered
        volverButton.setOpaque(true);
        volverButton.setBackground(new Color (150, 231, 255) ); 
    }//GEN-LAST:event_volverButtonMouseEntered

    private void volverButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverButtonMouseExited
        volverButton.setBackground(new Color (223, 246, 255) );
    }//GEN-LAST:event_volverButtonMouseExited

    private void volverButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverButtonMousePressed
        volverButton.setBackground(new Color (223, 246, 255) );
        PanelGUIHandler.getinstance().changePanel(PanelGUIHandler.actualizarPrecios,null);
        SMenuGUIHandler.getInstance().changePanel(SMenuGUIHandler.menuSecundarioVacio,null);
    }//GEN-LAST:event_volverButtonMousePressed

    private void profesionalJTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_profesionalJTKeyTyped
        
    }//GEN-LAST:event_profesionalJTKeyTyped
    
        private void leerTablaProfesional(){
            profesionalJT.setDefaultEditor(Object.class, new DefaultCellEditor(new JTextField()) {
        {
            getComponent().addKeyListener(new KeyAdapter() {
                public void keyPressed(KeyEvent e) {
                    profesionalJT.setShowGrid(true);
                    if (e.getKeyChar() == '\n') {
                        if (profesionalJT.isEditing()) {
                            profesionalJT.getCellEditor().stopCellEditing();
                        }


                        int filaSeleccionada = profesionalJT.getSelectedRow();

                        if (filaSeleccionada != -1) {
                            // Verifica si se ha seleccionado una fila
                            DefaultTableModel modelo = (DefaultTableModel) profesionalJT.getModel();

                            // Obtén los valores de la fila seleccionada
                            String montoStr = modelo.getValueAt(filaSeleccionada, 1).toString();
                            String prestacion = modelo.getValueAt(filaSeleccionada, 0).toString();
                            String regex = "^[0-9]+(\\.[0-9]{1,2})?$";

                        if (montoStr.matches(regex)) {
                            float precio = Float.parseFloat(montoStr);
                            Monto monto = new Monto();
                            Monto newMonto = new Monto();
                            profesionalJT.addColumn(idsPrestacion);
                            Prestacion pr = PrestacionManager.getInstance().getById(Integer.parseInt(profesionalJT.getValueAt(filaSeleccionada,2).toString()));
                            profesionalJT.removeColumn(idsPrestacion);
                            monto.setIdPrestacion(pr.getId());
                            newMonto.setIdPrestacion(pr.getId());
                            Profesional p = ProfesionalList.get(profesionalCB.getSelectedIndex()-1);
                            monto.setIdProfesional(p.getId());
                            newMonto.setIdProfesional(p.getId());
                            newMonto.setPrecio(precio);
                            boolean result = MontoManager.getInstance().modify(monto, newMonto);
                            if(result){
                                DefaultTableModel tableModel = (DefaultTableModel) profesionalJT.getModel();
                                tableModel.setRowCount(0); // Elimina todos los datos de la tabla

                                // Agrega nuevos datos a la tabla según la opción seleccionada en el JComboBox
                                Profesional profesional = ProfesionalList.get(profesionalCB.getSelectedIndex()-1);
                                JTable auxTable = ProfesionalTableGenerator.getInstance().generateTable(profesional);
                                profesionalJT.setModel(auxTable.getModel());
                                ActualizarPreciosProfesional.getInstance().removeColumn();
                            }

                        } else {
                            JOptionPane.showMessageDialog(ActualizarPreciosProfesional.getInstance(), "El monto introducido no tiene un formato válido.\nDebe ser un número con hasta dos decimales (por ejemplo, 123.45).");
                        }
                        }
                    }
                }
            });
        }
    });
        }

    public void leeCB(){
        profesionalCB.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                DefaultTableModel tableModel = (DefaultTableModel) profesionalJT.getModel();
                tableModel.setRowCount(0); // Elimina todos los datos de la tabla

                // Agrega nuevos datos a la tabla según la opción seleccionada en el JComboBox
                if(profesionalCB.getSelectedIndex()!=0){

                    Profesional profesional = ProfesionalList.get(profesionalCB.getSelectedIndex()-1);
                    JTable auxTable = ProfesionalTableGenerator.getInstance().generateTable(profesional);
                    profesionalJT.setModel(auxTable.getModel());
                    profesionalJT.setRowHeight(25);
                    ActualizarPreciosProfesional.getInstance().removeColumn();


                }else{
                    JTable auxTable = ProfesionalTableGenerator.getInstance().generateTable(null);
                    profesionalJT.setModel(auxTable.getModel());
                    profesionalJT.setRowHeight(25);
                    ActualizarPreciosProfesional.getInstance().removeColumn();
                }

            }
        });
    }

    public void removeColumn(){
        DefaultTableColumnModel tcm = (DefaultTableColumnModel)profesionalJT.getColumnModel();
        idsPrestacion = tcm.getColumn(2);
        tcm.removeColumn(tcm.getColumn(2));

    }

    @Override
    public void setup(List<Object> arguments) {
        //carga de combobox

        ProfesionalList = ProfesionalManager.getInstance().getAll();
        ComboBoxModel<String> cb = new DefaultComboBoxModel<>();
        profesionalCB.setModel(cb);
        profesionalCB.addItem("Ingrese una opcion");

        for (int i=1;i<=ProfesionalList.size();i++) {
            profesionalCB.insertItemAt(ProfesionalList.get(i-1).getNombre(),i);
        }

        JTable auxTalble = ProfesionalTableGenerator.getInstance().generateTable(null);
        profesionalCB.setSelectedIndex(0);
        profesionalJT.setModel(auxTalble.getModel());
        this.removeColumn();
    }
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> profesionalCB;
    private javax.swing.JTable profesionalJT;
    private javax.swing.JLabel volverButton;
    // End of variables declaration//GEN-END:variables
}
