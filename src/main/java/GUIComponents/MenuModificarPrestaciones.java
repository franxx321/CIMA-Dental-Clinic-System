/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUIComponents;

import Managers.TurnoManager;
import Managers.TurnoPrestacionManager;
import Objetos.Prestacion;
import Objetos.Turno;
import Objetos.TurnoPrestacion;
import Utils.GUIUtils.PanelGUIHandler;
import Utils.GUIUtils.SMenuGUIHandler;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author franc
 */
 public class MenuModificarPrestaciones extends Panel {

     Turno turno;

     List<Prestacion> allPrestacion;

     List<Prestacion> somePrestacion;

     private static MenuModificarPrestaciones menuModificarPrestaciones;

     public static MenuModificarPrestaciones getInstance(){
         if (menuModificarPrestaciones ==null){
             menuModificarPrestaciones= new MenuModificarPrestaciones();
         }
         return menuModificarPrestaciones;
     }

    /**
     * Creates new form MenuPrestaciones
     */
    private MenuModificarPrestaciones() {
        initComponents();
    }

    @Override
    public void setup(List<Object> arguments) {
        turno= (Turno)arguments.get(0);
        JTable auxTable = TurnoManager.getInstance().getPrestacionesByTurnoTable(turno);
        prestacionesTable.setModel(auxTable.getModel());
        allPrestacion = TurnoManager.getInstance().getAllPrestaciones();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        prestacionesTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        prestacionesTF = new javax.swing.JTextField();
        confirmarButton = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        eliminarButton = new javax.swing.JLabel();
        volverButton = new javax.swing.JLabel();

        setBackground(new java.awt.Color(223, 246, 255));

        jScrollPane1.setBackground(new java.awt.Color(223, 246, 255));

        prestacionesTable.setBackground(new java.awt.Color(223, 244, 255));
        prestacionesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(prestacionesTable);

        jLabel1.setText("Nueva Prestacion");

        prestacionesTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                prestacionesTFKeyPressed(evt);
            }
        });

        confirmarButton.setText("Confirmar");
        confirmarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                confirmarButtonMousePressed(evt);
            }
        });

        jLabel3.setText("Prestaciones Activas");

        eliminarButton.setText("Eliminar");
        eliminarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eliminarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                eliminarButtonMousePressed(evt);
            }
        });

        volverButton.setText("Volver");
        volverButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        volverButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                volverButtonMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(prestacionesTF, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(confirmarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 350, Short.MAX_VALUE)
                                .addComponent(volverButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(385, 385, 385)
                        .addComponent(eliminarButton)))
                .addGap(145, 145, 145))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prestacionesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmarButton)
                    .addComponent(volverButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(eliminarButton)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void volverButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverButtonMousePressed
        TurnoManager.getInstance().deleteTurnoPrestacionByTurno(turno);
        DefaultTableModel tm = (DefaultTableModel) prestacionesTable.getModel();
        List<TurnoPrestacion> turnoPrestacionList = new ArrayList<>();
        for (int i= 0; i<tm.getColumnCount();i++){
            for (Prestacion prestacion: allPrestacion){
                if(prestacion.getNombre().equals((String)tm.getValueAt(i,0))){
                    TurnoPrestacion turnoPrestacion = new TurnoPrestacion();
                    turnoPrestacion.setIdTurno(turno.getId());
                    turnoPrestacion.setIdPrestacion(prestacion.getId());
                    turnoPrestacionList.add(turnoPrestacion);
                }
            }
        }
        TurnoManager turnoManager = TurnoManager.getInstance();
        for (TurnoPrestacion turnoPrestacion: turnoPrestacionList){
            turnoManager.addTurnoPrestacion(turnoPrestacion);
        }
        List<Object>arguments = new ArrayList<>();
        arguments.add(turno);
        PanelGUIHandler.getinstance().changePanel(PanelGUIHandler.modificarTurno,arguments);
        SMenuGUIHandler.getInstance().changePanel(SMenuGUIHandler.menuSecundarioTurnos,null);

    }//GEN-LAST:event_volverButtonMousePressed

    private void confirmarButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmarButtonMousePressed
        Prestacion prestacion = null;
        String prestacionString = prestacionesTF.getText().trim();
        Pattern patron = Pattern.compile("("+prestacionString+")");
        for (Prestacion prestacion1: somePrestacion){
            Matcher matcher = patron.matcher(prestacion1.getNombre());
            if (matcher.find()){
                prestacion = prestacion1;
                break;
            }
        }
        DefaultTableModel tm = (DefaultTableModel) prestacionesTable.getModel();
        if(prestacion!=null){
        Vector<String> vector = new Vector<>();
        vector.add(prestacion.getNombre());
        vector.add(prestacion.getDescripcion());
        tm.addRow(vector);
        }
        this.repaint();
        this.revalidate();
    }//GEN-LAST:event_confirmarButtonMousePressed

    private void eliminarButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminarButtonMousePressed
        int row = prestacionesTable.getSelectedRow();
        DefaultTableModel tm = (DefaultTableModel) prestacionesTable.getModel();
        tm.removeRow(row);
        this.repaint();
        this.revalidate();
        // TODO add your handling code here:
    }//GEN-LAST:event_eliminarButtonMousePressed

    private void prestacionesTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_prestacionesTFKeyPressed

        prestacionesTF.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                String prestacionString = prestacionesTF.getText();
                JPopupMenu popupMenu = new JPopupMenu();
                popupMenu.setFocusable(false);  // Asegúrate de que el menú emergente no tome el foco
                popupMenu.removeAll();
                Pattern patron = Pattern.compile("("+prestacionString+")");
                somePrestacion= new ArrayList<>();

                for (Prestacion prestacion:allPrestacion) {
                    Matcher matcher = patron.matcher(prestacion.getNombre());
                    if (matcher.find()){
                        somePrestacion.add(prestacion);
                    }
                }

                for (Prestacion option : somePrestacion) {
                    JMenuItem item = new JMenuItem(option.getNombre());
                    item.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            prestacionesTF.setText(e.getActionCommand());
                        }
                    });
                    popupMenu.add(item);

                }

                if (popupMenu.getComponentCount() > 0) {
                    popupMenu.show(prestacionesTF, 0, prestacionesTF.getHeight());
                }
            }
        });

    }//GEN-LAST:event_prestacionesTFKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel confirmarButton;
    private javax.swing.JLabel eliminarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField prestacionesTF;
    private javax.swing.JTable prestacionesTable;
    private javax.swing.JLabel volverButton;
    // End of variables declaration//GEN-END:variables
}
