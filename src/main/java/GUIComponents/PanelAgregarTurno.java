/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUIComponents;

import Managers.PacienteManager;
import Managers.TurnoManager;
import Objetos.Paciente;
import Objetos.Prestacion;
import Objetos.Profesional;
import Objetos.Turno;
import Utils.Exceptions.CantAddTurno;
import Utils.FormatedDate;
import Utils.GUIUtils.PanelGUIHandler;
import Utils.GUIUtils.SMenuGUIHandler;

import java.util.*;

import Utils.TableGenerator.CalendarTableGenerator;
import java.awt.Color;
import org.jdatepicker.impl.DateComponentFormatter;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 *
 * @author franc
 */
public class PanelAgregarTurno extends Panel {


    //IMPORTANTE datepicker necesita un datepanel, que necesita un datemodel, la inicializacion de los mismos esta en el constructor
    // link de instruccion : https://www.codejava.net/java-se/swing/how-to-use-jdatepicker-to-display-calendar-component

    private JDatePickerImpl datePicker;
    private JDatePanelImpl datePanel;

    private UtilDateModel model;

    private boolean working = false;

    private static PanelAgregarTurno panelAgregarTurno;

    private List<Prestacion> allPrestacion;

    private List<Prestacion> somePrestacion;

    int week=0;

    private List<Profesional> profesionalList;


    public static PanelAgregarTurno getInstance(){
        if(panelAgregarTurno==null){
            panelAgregarTurno= new PanelAgregarTurno();
        }
        return panelAgregarTurno;
    }

    /**
     * Creates new form AgregarTurno
     */
    private PanelAgregarTurno() {
        initComponents();
        model= new UtilDateModel();
        //IMPORTANTE a partir de la version 1.3.4 de JDatePicker se necesita darle properties al DatePanel
        // link: https://stackoverflow.com/questions/26794698/how-do-i-implement-jdatepicker
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        Date today = FormatedDate.formatedDate(new Date());
        model.setDate(today.getYear()+1900, today.getMonth(),today.getDay());
        datePanel=new JDatePanelImpl(model,p);
        datePicker = new JDatePickerImpl(datePanel, new DateComponentFormatter());
        datePickerPanel.add(datePicker);
        allPrestacion= TurnoManager.getInstance().getAllPrestaciones();
    }


    @Override
    public void setup(List<Object> arguments) {
        Date today = FormatedDate.formatedDate(new Date());
        model.setDate(today.getYear()+1900, today.getMonth(),today.getDay());
        model.setSelected(true);
        profesionalList = TurnoManager.getInstance().getAllProfesional();
        ComboBoxModel<String> cb = new DefaultComboBoxModel<>();
        profesionalCB.setModel(cb);
        profesionalCB.addItem("Ingrese una opcion");
        for (int i=1;i<=profesionalList.size();i++) {
            profesionalCB.insertItemAt(profesionalList.get(i-1).getNombre(),i);
        }
        if (!working){
            week =0;
            profesionalCB.setSelectedIndex(0);
            pacienteTF.setText("");
            horaFinTF.setText("");
            horaInicioTF.setText("");
            servicioTF.setText("");
            allPrestacion= TurnoManager.getInstance().getAllPrestaciones();
            JTable auxTable= TurnoManager.getInstance().getCalendar(null,0);
            calendarTable.setModel(auxTable.getModel());
            calendarTable.setDefaultRenderer(Object.class,auxTable.getDefaultRenderer(Object.class));
            working=true;
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        profesionalCB = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pacienteTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        servicioTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        horaFinTF = new javax.swing.JTextField();
        horaInicioTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cancelarButton = new javax.swing.JLabel();
        confirmarButton = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        calendarTable = new javax.swing.JTable();
        flechaDerButton = new javax.swing.JLabel();
        flechaIzqButton = new javax.swing.JLabel();
        datePickerPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(223, 246, 255));
        setPreferredSize(new java.awt.Dimension(907, 652));

        profesionalCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opcion" }));
        profesionalCB.setPreferredSize(new java.awt.Dimension(200, 29));
        profesionalCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profesionalCBActionPerformed(evt);
            }
        });

        jLabel1.setText("Profesional: ");

        jLabel2.setText("Dni paciente:");

        pacienteTF.setPreferredSize(new java.awt.Dimension(200, 29));
        pacienteTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pacienteTFActionPerformed(evt);
            }
        });

        jLabel3.setText("Prestacion:");

        servicioTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicioTFActionPerformed(evt);
            }
        });
        servicioTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                servicioTFKeyPressed(evt);
            }
        });

        jLabel4.setText("Hora de inicio:");

        jLabel5.setText("Hora de fin:");

        jLabel6.setText("Fecha: ");

        cancelarButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cancelarButton.setText("Cancelar");
        cancelarButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cancelarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelarButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelarButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cancelarButtonMousePressed(evt);
            }
        });

        confirmarButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        confirmarButton.setText("Confirmar");
        confirmarButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        confirmarButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                confirmarButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                confirmarButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                confirmarButtonMousePressed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(223, 246, 255));

        calendarTable.setBackground(new java.awt.Color(223, 244, 255));
        calendarTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        calendarTable.setGridColor(new java.awt.Color(223, 244, 255));
        jScrollPane1.setViewportView(calendarTable);

        flechaDerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/right-arrow 24x24.png"))); // NOI18N
        flechaDerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        flechaDerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                flechaDerButtonMousePressed(evt);
            }
        });

        flechaIzqButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/left-arrow 24x24.png"))); // NOI18N
        flechaIzqButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        flechaIzqButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                flechaIzqButtonMousePressed(evt);
            }
        });

        datePickerPanel.setBackground(new java.awt.Color(223, 246, 255));
        datePickerPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(profesionalCB, 0, 202, Short.MAX_VALUE)
                    .addComponent(pacienteTF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(servicioTF, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(datePickerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(horaFinTF, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaInicioTF, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(93, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(flechaIzqButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214)
                .addComponent(confirmarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(flechaDerButton)
                .addGap(23, 23, 23))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(horaInicioTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(profesionalCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(datePickerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pacienteTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaFinTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(servicioTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(flechaDerButton)
                            .addComponent(flechaIzqButton))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confirmarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents



    private void changeCalendar (){
        String idProfesional;
        if(profesionalCB.getSelectedIndex()==0){
            idProfesional=null;
        }
        else {
            idProfesional = profesionalCB.getItemAt(profesionalCB.getSelectedIndex());
        }
        JTable auxTable = TurnoManager.getInstance().getCalendar(idProfesional,week);
        calendarTable.setModel(auxTable.getModel());
        calendarTable.setDefaultRenderer(Object.class,auxTable.getDefaultRenderer(Object.class));
        Frame.getInstance().repaint();
        Frame.getInstance().revalidate();
    }

    private void profesionalCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profesionalCBActionPerformed
        this.changeCalendar();
    }//GEN-LAST:event_profesionalCBActionPerformed

    private void pacienteTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pacienteTFActionPerformed

    }//GEN-LAST:event_pacienteTFActionPerformed

    private void servicioTFActionPerformed(java.awt.event.ActionEvent evt) {

                                                 
    }                                          

    private void cancelarButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarButtonMousePressed
        working=false;
        PanelGUIHandler.getinstance().changePanel(PanelGUIHandler.panelTurnos, null);
        SMenuGUIHandler.getInstance().changePanel(SMenuGUIHandler.menuSecundarioVacio, null);
        cancelarButton.setBackground(new Color (223, 246, 255) );
    }//GEN-LAST:event_cancelarButtonMousePressed

    private void confirmarButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmarButtonMousePressed
        boolean error = false;
        String errorString="";
        Prestacion ptcn = new Prestacion();
        ptcn.setNombre(servicioTF.getText());
        Profesional profesional = null;
        if(profesionalCB.getSelectedIndex()==0){
            error = true;
            errorString= errorString+"Seleccione un profesional\n";
        }
        else{
            profesional = profesionalList.get(profesionalCB.getSelectedIndex()-1);
        }
        String pacienteDniString =pacienteTF.getText();
        long pacienteDni=0;
        Date fecha = FormatedDate.formatedDate((Date) datePicker.getModel().getValue());
        String horaInicioString = horaInicioTF.getText().trim();
        String horaFinString = horaFinTF.getText().trim();
        long milisegundos = fecha.getTime();
        long horaInicioEnMilisegundos=0;
        long horafinEnMilisegundos=0;
        // trim recorta los espacios vacios adelante y atras del string

        Pattern patron = Pattern.compile("^([01]?[0-9]|2[0-3]):([0-5][0-9])$");
        Matcher matcher1 = patron.matcher(horaInicioString);
        Matcher matcher2 = patron.matcher(horaFinString);

        if(horaInicioString.isBlank()){
            error=true;
            errorString= errorString+ "Ingrese una hora de inicio\n";
        }
        else{
            if (matcher1.matches()) {
                int hora1= Integer.parseInt(matcher1.group(1));
                int minutos1= Integer.parseInt(matcher1.group(2));
                horaInicioEnMilisegundos = ((long) hora1 * 60 * 60 * 1000) + ((long) minutos1 * 60 * 1000);
            }else {
                // JOptionPane.showMessageDialog(null, "Inserte una hora de inicio correcta.");
                error = true;
                horaInicioTF.setText("");
                errorString = errorString+"Hora de inicio incorrecta.\n";

            }

        }
        if (horaFinString.isBlank()){
            error=true;
            errorString= errorString+ "Ingrese una hora de fin\n";
        }
        else {
            if (matcher2.matches()) {
                int hora2= Integer.parseInt(matcher2.group(1));
                int minutos2= Integer.parseInt(matcher2.group(2));
                horafinEnMilisegundos = ((long) hora2 * 60 * 60 * 1000) + ((long) minutos2 * 60 * 1000);
            }else{

                error = true;
                horaFinTF.setText("");
                errorString = errorString+"Hora de fin incorrecta.\n";
            }
        }

        if (pacienteDniString.isBlank()){
            error=true;
            errorString= errorString+ "Ingrese un paciente\n";
        }
        else {
            Pattern patron1 = Pattern.compile("^[1-9]\\d{6,10}$");
            Matcher matcher3 = patron1.matcher(pacienteDniString);
            if (matcher3.matches()){
                pacienteDni= Long.parseLong(pacienteDniString);
            }
            else {
                error=true;
                errorString = errorString + "DNI invalido";
            }
        }

        if(error){
            JOptionPane.showMessageDialog(this, "Error!\n" + errorString);
        }else{
            horaInicioEnMilisegundos +=milisegundos;
            horafinEnMilisegundos +=milisegundos;
            try{
                TurnoManager.getInstance().addTurno(ptcn,profesional,pacienteDni,horaInicioEnMilisegundos,horafinEnMilisegundos);
                JOptionPane.showMessageDialog(this, "El turno fue agendado correctamente");
                PanelGUIHandler.getinstance().changePanel(PanelGUIHandler.panelTurnos,null);
                SMenuGUIHandler.getInstance().changePanel(SMenuGUIHandler.menuSecundarioVacio,null);
                confirmarButton.setBackground(new Color (223, 246, 255) );
            }
            catch (CantAddTurno e){
                JOptionPane.showMessageDialog(this, "Error!\n" + e.getErrors());
            }
        }
        working=false;
    }//GEN-LAST:event_confirmarButtonMousePressed

    private void flechaDerButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flechaDerButtonMousePressed
        week++;
        this.changeCalendar();
    }//GEN-LAST:event_flechaDerButtonMousePressed

    private void flechaIzqButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flechaIzqButtonMousePressed
        if (week>0){
            week--;
            this.changeCalendar();
        }

    }//GEN-LAST:event_flechaIzqButtonMousePressed

    private void servicioTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_servicioTFKeyPressed
        servicioTF.addKeyListener(new KeyAdapter() {
        public void keyReleased(KeyEvent e) {
            String prestacionString = servicioTF.getText();
            JPopupMenu popupMenu = new JPopupMenu();
            popupMenu.setFocusable(false);  // Asegúrate de que el menú emergente no tome el foco
            popupMenu.removeAll();
            Pattern patron = Pattern.compile("("+prestacionString+")");
            somePrestacion= new ArrayList<>();

            for (Prestacion prestacion:allPrestacion) {
                Matcher matcher = patron.matcher(prestacion.getNombre());
                if (matcher.find()){
                    somePrestacion.add(prestacion);
                }
            }
            

            for (Prestacion option : somePrestacion) {
                    JMenuItem item = new JMenuItem(option.getNombre());
                    item.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            servicioTF.setText(e.getActionCommand());
                        }
                    });
                    popupMenu.add(item);
                
            }

            if (popupMenu.getComponentCount() > 0) {
                popupMenu.show(servicioTF, 0, servicioTF.getHeight());
            }
        }
    });
    }//GEN-LAST:event_servicioTFKeyPressed

    private void cancelarButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarButtonMouseEntered
        cancelarButton.setOpaque(true);
        cancelarButton.setBackground(new Color (255, 105, 97) ); 
    }//GEN-LAST:event_cancelarButtonMouseEntered

    private void cancelarButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarButtonMouseExited
       cancelarButton.setBackground(new Color (223, 246, 255) );  
    }//GEN-LAST:event_cancelarButtonMouseExited

    private void confirmarButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmarButtonMouseEntered
        confirmarButton.setOpaque(true);
        confirmarButton.setBackground(new Color (152, 251, 152) );
    }//GEN-LAST:event_confirmarButtonMouseEntered

    private void confirmarButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmarButtonMouseExited
        confirmarButton.setBackground(new Color (223, 246, 255) );
    }//GEN-LAST:event_confirmarButtonMouseExited




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable calendarTable;
    private javax.swing.JLabel cancelarButton;
    private javax.swing.JLabel confirmarButton;
    private javax.swing.JPanel datePickerPanel;
    private javax.swing.JLabel flechaDerButton;
    private javax.swing.JLabel flechaIzqButton;
    private javax.swing.JTextField horaFinTF;
    private javax.swing.JTextField horaInicioTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pacienteTF;
    private javax.swing.JComboBox<String> profesionalCB;
    private javax.swing.JTextField servicioTF;
    // End of variables declaration//GEN-END:variables
}
